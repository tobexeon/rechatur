#!/bin/bash


if [[ "help" = "$1" ]] || [[ ! -n "${1}" ]] ;then
	echo 请依次填写 "房间ID" "查询时间间隔(s)" "储存位置" "是否使用rsync自动备份(yes/no)" "rsync路径" "rsync失败尝试次数" "rsync服务器地址" "rsync服务器端口" "rsync用户名"
	echo 若要使用rsync+ssh备份，请确定已经设置对远程服务器的免密登录,rsync的最终储存路径为"填写的rsync路径+本地路径"，比如填写的rsync路径和本地路径分别为"volume/"和"/chaturbate",则远程服务器的最终储存路径为volume/chaturbate/直播房间ID
	echo 本脚本依赖于ffmpeg和curl，请注意安装，为了防止出现各种问题，请尽量安装较新的版本
	exit 0
fi

#检查依赖
CHECK=0
if which "ffmpeg" >/dev/null 2>&1; [[ 0 != $? ]];then 
	let CHECK++
	echo 请先安装ffmpeg，再使用本程序 
fi
if which "curl" >/dev/null 2>&1; [[ 0 != $? ]];then
	echo 请先安装curl，再使用本程序
	let CHECK++
fi
if ls $(dirname "$0") |grep rechatur-deamon >/dev/null 2>&1; [[ 0 != $? ]];then
	let CHECK++
	echo 未找到守护程序,退出程序
fi	
if [[ $CHECK != 0 ]] ;then
	exit 0
fi

DIR_LOCAL=${3}/$1; mkdir -p "${DIR_LOCAL}"

#判断程序是否首次运行
ps aux|grep $1 |grep rechatur-deamon >/dev/null 2>&1
if [[ $? != 0 ]];then
	rm -f $DIR_LOCAL/*.ts.*
	ls $DIR_LOCAL|grep .ts |sed "s:^:"$DIR_LOCAL"/:"|sed 's/$/.fail/g'|xargs touch  >/dev/null 2>&1
	#运行守护程序
	($(dirname $(readlink -f "$0"))/rechatur-deamon $1 $2 $3 $4 $5 $6 $7 $8 $9)&
fi


#监视直播间
while true;do
LIVE_STATUS=0
FULL_URL="https://chaturbate.com/${1}/"
echo 正在获取$1的直播间信息
while [[ $LIVE_STATUS == 0 ]]; do
	LIVE_URL=$(curl -s "https://chaturbate.com/$1/" | grep -o "https://edge[0-9]*.stream.highwebmedia.com.*/playlist.m3u8" | sed 's/\\u002D/-/g')
	if [[ -n "${LIVE_URL}" ]]; then 
		let LIVE_STATUS++;echo 找到直播 开始录制 直播地址为$LIVE_URL
		else sleep $2
	fi
done

#开始录制
STREAM_URL="${LIVE_URL/playlist.m3u8/}$(curl -s "${LIVE_URL}" | tail -n 1)" 
FNAME="chaturbate_$1_$(date +"%Y%m%d_%H%M%S").ts"
(ffmpeg -user_agent "Mozilla/5.0" -i "${STREAM_URL}" -codec copy -f mpegts "${DIR_LOCAL}/${FNAME}" >/dev/null 2>&1) &
touch ${DIR_LOCAL}/${FNAME}.rec >/dev/null 2>&1
RECORD_PID=$!
while true; do
	sleep 15
	PID_EXIST=$(ps aux |grep ${RECORD_PID}|grep $1 )
	if [[ ! $PID_EXIST ]]; then
		echo "录制结束"
		rm ${DIR_LOCAL}/${FNAME}.rec >/dev/null 2>&1
		break
	fi
done

#在后台进程上传
(RSYNC_RETRY=1 ;
if [[ "$4" == "yes" ]]; then
	until [[ $RSYNC_RETRY -gt $6 ]]; do
		ls ${DIR_LOCAL}|grep ${FNAME}||break
		touch ${DIR_LOCAL}/${FNAME}.lock
		rsync -avRP -e "ssh -p $8"  ${DIR_LOCAL}/${FNAME} $9@$7::$5
		if [[ "$?" == "0" ]];then
			rm -f ${DIR_LOCAL}/${FNAME}.lock
			break
		fi
		rm -f ${DIR_LOCAL}/${FNAME}.lock
		let RSYNC_RETRY++
		sleep 30
	done
fi

[[ "$4" == "yes" ]] && ls "${DIR_LOCAL}" |grep "${FNAME}.lock" && mv "${DIR_LOCAL}/${FNAME}.lock" "${DIR_LOCAL}/${FNAME}.fail" || rm -f "${DIR_LOCAL}/${FNAME}"
[[ "$4" == "yes" ]] && ls "${DIR_LOCAL}" |grep "${FNAME}.fail" && echo "文件${DIR_LOCAL}/${FNAME}上传失败"
) &
sleep 5
done
